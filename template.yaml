AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'

Resources:
  QueueOrderPayment:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: queue-order-payment
  QueuePaymentComplete:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: queue-payment-complete


  OrderTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: order-table
      AttributeDefinitions:
        - AttributeName: user_id
          AttributeType: S
        - AttributeName: status
          AttributeType: S
      KeySchema:
        - AttributeName: user_id
          KeyType: HASH
        - AttributeName: status
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
  PaymentTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: payment-table 
      AttributeDefinitions:
        - AttributeName: order_id
          AttributeType: S
        - AttributeName: status
          AttributeType: S
      KeySchema:
        - AttributeName: order_id
          KeyType: HASH
        - AttributeName: status
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
  
  OrderFunctionListen:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: order-listen
      CodeUri: ./OrderListener/build/order.zip
      Handler: main
      Runtime: go1.x
      Architectures:
        - x86_64
      Events:
        MySQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt QueueOrderPayment.Arn
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - sqs:ReceiveMessage
                - sqs:DeleteMessage
              Resource: !GetAtt QueueOrderPayment.Arn
        - DynamoDBCrudPolicy:
            TableName: !Ref PaymentTable

  OrderFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: order-function
      CodeUri: ./OrderService/build/order.zip
      Handler: main
      Runtime: go1.x
      Architectures:
        - x86_64
      Events:
        CatchAll:
          Type: Api
          Properties:
            Path: /stagging/order
            Method: POST
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - sqs:GetQueueUrl
              Resource: !GetAtt QueueOrderPayment.Arn
            - Effect: Allow
              Action:
                - sqs:SendMessage
              Resource: !GetAtt QueueOrderPayment.Arn
        - DynamoDBCrudPolicy:
            TableName: !Ref OrderTable

  PaymenteFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: payment-function
      CodeUri: ./PaymentService/build/payment.zip
      Handler: main
      Runtime: go1.x
      Architectures:
        - x86_64
      Events:
        CatchAll:
          Type: Api
          Properties:
            Path: /stagging/payment
            Method: POST
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - sqs:GetQueueUrl
              Resource: !GetAtt QueuePaymentComplete.Arn
            - Effect: Allow
              Action:
                - sqs:SendMessage
              Resource: !GetAtt QueuePaymentComplete.Arn
        - DynamoDBCrudPolicy:
            TableName: !Ref PaymentTable

  ApiGatewayRestApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: stagging
      DefinitionBody:
        swagger: '2.0'
        info:
          title: 'API Order'
        paths:
          /order:
            post:
              x-amazon-apigateway-integration:
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OrderFunction.Arn}/invocations
                passthroughBehavior: when_no_templates
                httpMethod: POST
                type: aws_proxy
          /payment:
            post:
              x-amazon-apigateway-integration:
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PaymenteFunction.Arn}/invocations
                passthroughBehavior: when_no_templates
                httpMethod: POST
                type: aws_proxy
  LambdaPermissionOrder:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt OrderFunction.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/*/*/*"
  LambdaPermissionPayment:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt PaymenteFunction.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/*/*/*"
      